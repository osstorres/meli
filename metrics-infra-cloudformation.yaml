AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  LambdaFastApiImage:
    Type: String
    Description: Docker image URI for the Fast Api Lambda function
  ConsumerLambdaImage:
    Type: String
    Description: Docker image URI for the Consumer Lambda function

# =======================================

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Subnet1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.5.0/24"
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: Subnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

# =======================================


  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PrivateRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PrivateRouteTable

# =======================================


  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LambdaSecurityGroup
      GroupDescription: LambdaSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"


  SQSVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "sqs:*"
            Resource:
              - "*"
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2


  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "dynamodb:*"
            Resource:
              - "*"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC



# ======================================= FAST API

  FastApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt FastApiLambdaRole.Arn
      FunctionName: FastApiLambda
      Code:
        ImageUri: !Ref LambdaFastApiImage
      PackageType: Image
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: stats
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2


  FastApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FastApiLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FastApiLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                  - ec2:DescribeRouteTables
                Resource: '*'
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"

                Effect: Allow

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: stats
      AttributeDefinitions:
        - AttributeName: date_key
          AttributeType: S
      KeySchema:
        - AttributeName: date_key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10


  CloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'




# ======================================= API GATEWAY


  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FastApiLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"


  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Fast Api
      Description: Fast Api

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{proxy+}"


  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FastApiLambdaFunction.Arn}/invocations"


  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGateway
      StageName: prod

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway



  FasApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FastApiLambda
      RetentionInDays: 1  # Set retention period

  ConsumerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/ConsumerLambda
      RetentionInDays: 1  # Set retention period

# ======================================= CONSUMER

  StatsQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: stats_queue


  ConsumerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ConsumerLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt StatsQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                  - ec2:DescribeRouteTables
                Resource: '*'
              - Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                Resource:
                   - !GetAtt DynamoDBTable.Arn
                   - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"

                Effect: Allow


  ConsumerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ConsumerLambdaRole.Arn
      FunctionName: ConsumerLambda
      Code:
        ImageUri: !Ref ConsumerLambdaImage
      PackageType: Image
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: stats
          SQS_QUEUE_URL: !GetAtt StatsQueue.QueueUrl
          SQS_ENDPOINT: ""
          DYNAMODB_ENDPOINT: ""
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ConsumerLambdaFunction.Arn
      Principal: 'sqs.amazonaws.com'
      SourceArn: !GetAtt StatsQueue.Arn

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt StatsQueue.Arn
      FunctionName: !GetAtt ConsumerLambdaFunction.Arn

# ======================================= OUTPUT

Outputs:
  QueueURL:
    Description: "URL SQS"
    Value: !GetAtt StatsQueue.QueueUrl
  FastApiUrl:
    Description: "URL API GATEWAY FAST API"
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
      - ApiId: !Ref ApiGateway
        StageName: !Ref ApiStage
